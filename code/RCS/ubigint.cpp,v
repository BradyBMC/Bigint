head	1.13;
access;
symbols;
locks;
comment	@// @;


1.13
date	2021.04.14.20.24.23;	author -;	state -;
branches;
next	1.12;

1.12
date	2020.10.19.20.14.59;	author -;	state -;
branches;
next	1.11;

1.11
date	2020.10.19.20.14.14;	author -;	state -;
branches;
next	1.10;

1.10
date	2020.10.11.19.25.22;	author -;	state -;
branches;
next	1.9;

1.9
date	2020.07.02.22.38.57;	author -;	state -;
branches;
next	1.8;

1.8
date	2020.01.06.21.39.55;	author -;	state -;
branches;
next	1.7;

1.7
date	2019.12.13.22.39.21;	author -;	state -;
branches;
next	1.6;

1.6
date	2019.12.13.04.33.02;	author -;	state -;
branches;
next	1.5;

1.5
date	2019.12.13.04.20.36;	author -;	state -;
branches;
next	1.4;

1.4
date	2019.12.13.03.56.31;	author -;	state -;
branches;
next	1.3;

1.3
date	2019.12.13.03.24.16;	author -;	state -;
branches;
next	1.2;

1.2
date	2019.12.13.03.22.40;	author -;	state -;
branches;
next	1.1;

1.1
date	2019.12.13.02.19.23;	author -;	state -;
branches;
next	;


desc
@@


1.13
log
@-
@
text
@// $Id: ubigint.cpp,v 1.12 2020-10-19 13:14:59-07 - - $

#include <cctype>
#include <cstdlib>
#include <exception>
#include <stack>
#include <stdexcept>
#include <cstring>
using namespace std;

#include "debug.h"
#include "relops.h"
#include "ubigint.h"

ubigint::ubigint (unsigned long that) : ubig_value(0) {
   while(that > 0) {
     ubig_value.push_back(that%10);
     that = that/10;
   }
   //DEBUGF ('~', this << " -> " << ubig_value.back)
}

ubigint::ubigint (const string& that) : ubig_value(0){
   DEBUGF ('~', "that = \"" << that << "\"");
   /*
   for (char digit: that) {
      if (not isdigit (digit)) {
         throw invalid_argument ("ubigint::ubigint(" + that + ")");
      }
      uvalue = uvalue * 10 + digit - '0';
   }
   */
   for(auto it = that.crbegin(); it != that.crend();it++) {
      if(not isdigit(*it)) {
        throw invalid_argument ("ubigint:: ubigint(" + that + ")");
      }
      ubig_value.push_back(*it - '0');
   }
}

//May crap out if one number is actually negative
ubigint ubigint::operator+ (const ubigint& that) const {
   DEBUGF ('u', *this << "+" << that);
   //ubigint result (uvalue + that.uvalue);
   ubigint result;
   //Index for that
   int indxt = 0;
   int indx = 0;
   int size = ubig_value.size();
   int sizet = that.ubig_value.size();
   bool carry = false;
   while(indx < size && indxt < sizet) {
     uint8_t sum = 0;
     if(carry) {
       sum++;
       carry = false;
     }
     sum = ubig_value[indx] + that.ubig_value[indxt] + sum;
     if(sum > 9) {
       sum = sum - 10;
       carry = true;
     }
     result.ubig_value.push_back(sum);
     indx++;
     indxt++;
   }
   if(carry && indx == size - 1 && indxt == sizet - 1) {
     result.ubig_value.push_back(1);
     return result;
   }
   while(indx < size) {
     uint8_t sum = 0;
     if(carry) {
       sum++;
       carry = false;
     }
     sum += ubig_value[indx];
     if(sum > 9) {
       sum = sum - 10;
       carry = true;
     }
     result.ubig_value.push_back(sum);
     indx++;
   }
   while(indxt < sizet) { 
     uint8_t sum = 0;
     if(carry) {
       sum++;
       carry = false;
     }
     sum += that.ubig_value[indxt];
     if(sum > 9) {
       sum = sum - 10;
       carry = true;
     }
     result.ubig_value.push_back(sum);
     indxt++;
   }
   if(carry) {
     result.ubig_value.push_back(1);
   }
   //result.multiply_by_2();
   //result.divide_by_2();
   //DEBUGF ('u', result);
   return result;
}

ubigint ubigint::operator- (const ubigint& that) const {
   //if (*this < that) throw domain_error ("ubigint::operator-(a<b)");
   if(*this < that) throw domain_error ("ubigint::operator~(a<b)");
   ubigint result;
   if(*this == that) {
     result.ubig_value.push_back(0);
     return result;
   }
   int indx = 0;
   int indxt = 0;
   int size = ubig_value.size();
   int sizet = that.ubig_value.size();
   bool carry = false;

   while(indx < size && indxt < sizet) {
     int sub = 0;
     if(carry) {
       sub = -1;
       carry = false;
     }
     sub = ubig_value[indx] - that.ubig_value[indxt] + sub;
     if(sub < 0) {
       sub += 10;
       carry = true;
     }
     int temp = sub;
     result.ubig_value.push_back(temp);
     indx++;
     indxt++;
   }
   while(indx < size) {
     if(carry) {
       if(ubig_value[indx] - 1 < 0) {
         result.ubig_value.push_back(ubig_value[indx] + 9);
       } else {
         carry = false;
         result.ubig_value.push_back(ubig_value[indx] - 1);
       }
     } else {
       result.ubig_value.push_back(ubig_value[indx]);
     }
     indx++;
   }
   while(result.ubig_value.size() > 0 &&result.ubig_value.back() ==0){
     result.ubig_value.pop_back();
   }
   return result;
}

ubigint ubigint::operator* (const ubigint& that) const {
   ubigint result;
   int size = ubig_value.size();
   int sizet = that.ubig_value.size();
   int length = ubig_value.size() + that.ubig_value.size();
   for(int i = 0;i < length;i++) result.ubig_value.push_back(0);
   for(int i = 0;i < size;i++) {
     uint8_t c = 0;
     for(int j = 0;j < sizet;j++) {
       uint8_t total = result.ubig_value[i+j];
       total = total + ubig_value[i] * that.ubig_value[j] + c;
       result.ubig_value[i+j] = total % 10;
       c = total/10;
     }
     result.ubig_value[i+that.ubig_value.size()] += c;
   }
   while(result.ubig_value.size() > 0 &&result.ubig_value.back() == 0){
     result.ubig_value.pop_back();
   }
   return result;
   //return ubigint (uvalue * that.uvalue);
}

void ubigint::multiply_by_2() {
   //uvalue *= 2;
   int size = ubig_value.size();
   bool carry = false;
   for(int i = 0;i < size;i++) {
     uint8_t dub = 0;
     if(carry) {
       dub = 1;
       carry = false;
     }
     dub = dub + (ubig_value[i] << 1);
     if(dub > 9) {
       dub -= 10;
       carry = true;
     }
     ubig_value[i] = dub;
   }
   if(carry) {
       ubig_value.push_back(1);
   }
}

void ubigint::divide_by_2() {
   //uvalue /= s2;
   int size = ubig_value.size();
   bool carry = false;
   for(int i = size - 1;i > 0;i--) {
     uint8_t div = 0;
     if(carry) {
       div = 10;
       carry = false;
     }
     uint8_t temp = div + ubig_value[i];
     div = (div + ubig_value[i]) >> 1;
     if(div == 0 || temp%2 == 1) {
       carry = true;
     }
     ubig_value[i] = div;
   }
   if(carry) {
     ubig_value[0] = (ubig_value[0] + 10) >> 1;
   } else {
     ubig_value[0] = (ubig_value[0]) >> 1;
   }
   while(ubig_value.size() > 0 && ubig_value.back() == 0){
     ubig_value.pop_back();
   }
}


struct quo_rem { ubigint quotient; ubigint remainder; };
quo_rem udivide (const ubigint& dividend, const ubigint& divisor_) {
   // NOTE: udivide is a non-member function.
   ubigint divisor {divisor_};
   ubigint zero {0};
   if (divisor == zero) throw domain_error ("udivide by zero");
   ubigint power_of_2 {1};
   ubigint quotient {0};
   ubigint remainder {dividend}; // left operand, dividend
   while (divisor < remainder) {
      //cout << "div " <<divisor << endl;
      divisor.multiply_by_2();
      //cout << "div after" << divisor << endl;
      //cout << "rem " <<  remainder << endl;
      power_of_2.multiply_by_2();
      //cout << "power" << endl;
   }
   cout << "2nd loop" << endl;
   while (power_of_2 > zero) {
      if (divisor <= remainder) {
         //cout << "divisor" << divisor << endl;
         //cout << "remainder" << remainder << endl;
         remainder = remainder - divisor;
         quotient = quotient + power_of_2;
      }
      divisor.divide_by_2();
      power_of_2.divide_by_2();
      //cout << "divisor" << divisor << endl;
      //cout << "power" << power_of_2 << endl;
   }
   //cout << "never " << endl;
   DEBUGF ('/', "quotient = " << quotient);
   DEBUGF ('/', "remainder = " << remainder);
   return {.quotient = quotient, .remainder = remainder};
}

ubigint ubigint::operator/ (const ubigint& that) const {
   return udivide (*this, that).quotient;
}

ubigint ubigint::operator% (const ubigint& that) const {
   return udivide (*this, that).remainder;
}

bool ubigint::operator== (const ubigint& that) const {
   //return uvalue == that.uvalue;
   if(ubig_value.size() != that.ubig_value.size()) {
     return false;
   }
   int index = ubig_value.size() - 1;
   while(index >= 0) {
       if(ubig_value[index] < that.ubig_value[index]) {
         return false;
       } else if(that.ubig_value[index] < ubig_value[index]) {
         return false;
       }
       /*
       else if(index == 0) {
         return true;
       }
       */
       index--;
   }
    int size = ubig_value.size();

   for(int i = size - 1;i >= 0;i--) {
     //cout << "ran"<< endl;
     cout << ubig_value[i];
   }
   return true;
}

bool ubigint::operator< (const ubigint& that) const {
   //return uvalue < that.uvalue;
   if(ubig_value.size() < that.ubig_value.size()) {
     return true;
   } else if(ubig_value.size() > that.ubig_value.size()) {
     return false;
   } else {
     for(int i = ubig_value.size() - 1;i >= 0;i--) {
       if(static_cast<int>(ubig_value[i]) < static_cast<int>(that.ubig_value[i])) {
         return true;
       } else if(static_cast<int>(ubig_value[i]) > static_cast<int>(that.ubig_value[i])) {
         return false;
       }
     }
   }
   /*
   cout << "here "<<endl;
   int size = ubig_value.size();
   cout << size << endl;
   cout << that.ubig_value.size() << "that"<< endl;
   for(int i = size - 1;i >= 0;i--) {
     cout << "ran"<< endl;
     cout << ubig_value[i];
   }*/
   
   //Returns false if both have size of 0
   return false;
}

ostream& operator<< (ostream& out, const ubigint& that) { 
   //return out << "ubigint(" << that.uvalue << ")";
   //out << "ubigint(";
   int cnt = 1;
   for(int i = that.ubig_value.size() - 1;i >= 0;i--) {
     int result = that.ubig_value[i];
     if (cnt == 70)
     {
       out << "\\" << endl;
       cnt = 0;
     }
     else
     {
       out << result;
     }
     cnt++;
   }
   //return out <<  ")";
   return out;
}
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.11 2020-10-19 13:14:14-07 - - $
d8 1
d15 6
a20 2
ubigint::ubigint (unsigned long that): uvalue (that) {
   DEBUGF ('~', this << " -> " << uvalue)
d23 1
a23 1
ubigint::ubigint (const string& that): uvalue(0) {
d25 1
d32 7
d41 1
d44 61
a104 2
   ubigint result (uvalue + that.uvalue);
   DEBUGF ('u', result);
d109 46
a154 2
   if (*this < that) throw domain_error ("ubigint::operator-(a<b)");
   return ubigint (uvalue - that.uvalue);
d158 20
a177 1
   return ubigint (uvalue * that.uvalue);
d181 19
a199 1
   uvalue *= 2;
d203 24
a226 1
   uvalue /= 2;
d240 1
d242 2
d245 1
d247 1
d250 2
d257 2
d260 1
d275 25
a299 1
   return uvalue == that.uvalue;
d303 26
a328 1
   return uvalue < that.uvalue;
d332 18
a349 1
   return out << "ubigint(" << that.uvalue << ")";
a350 1

@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.10 2020-10-11 12:25:22-07 - - $
d74 2
a75 2
   DEBUGF ('/', 'quotient = ' << quotient)
   DEBUGF ('/', 'remainder = ' << remainder)
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.9 2020-07-02 15:38:57-07 - - $
d74 2
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.8 2020-01-06 13:39:55-08 - - $
d10 2
a12 1
#include "debug.h"
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.16 2019-04-02 16:28:42-07 - - $
d28 4
a31 1
   return ubigint (uvalue + that.uvalue);
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.6 2019-12-12 20:33:02-08 - - $
d10 1
a11 2
#include "ubigint.h"
#include "util.h"
d27 2
a28 3
ubigint& ubigint::operator+= (const ubigint& that) {
   uvalue += that.uvalue;
   return *this;
d31 1
a31 1
ubigint& ubigint::operator-= (const ubigint& that) {
d33 1
a33 2
   uvalue -= that.uvalue;
   return *this;
d36 2
a37 3
ubigint& ubigint::operator*= (const ubigint& that) {
   uvalue *= that.uvalue;
   return *this;
d49 6
a54 13
void ubigint::divrem (ubigint divisor, bool want_quotient) {
   // Ancient Egyptian division algorithm
   // http://mathforum.org/library/drmath/view/57574.html
   // https://rosettacode.org/wiki/Egyptian_division
   // divisor is by value, not by const& because this
   // algorithm modifies the divisor's value
   // *this results in remainder at the end of the algorithm
   // quotient is a local variable assigned to *this for division
   static const ubigint ZERO {0};
   if (divisor == ZERO) {
      throw ydc_error (want_quotient ? "divide by zero"
                                     : "remainder by zero");
   }
d57 1
a57 1
   ubigint& remainder = *this; // ref to this named for clarity
d62 1
a62 1
   while (power_of_2 > ZERO) {
d70 1
a70 1
   if (want_quotient) *this = quotient;
d73 2
a74 3
ubigint& ubigint::operator/= (const ubigint& that) {
   divrem (that, true);
   return *this;
d77 2
a78 3
ubigint& ubigint::operator%= (const ubigint& that) {
   divrem (that, false);
   return *this;
a88 1

a90 25
}

ubigint operator+ (const ubigint& lhs, const ubigint& rhs) {
   ubigint result (lhs);
   return result += rhs;
}

ubigint operator- (const ubigint& lhs, const ubigint& rhs) {
   ubigint result (lhs);
   return result -= rhs;
}

ubigint operator* (const ubigint& lhs, const ubigint& rhs) {
   ubigint result (lhs);
   return result *= rhs;
}

ubigint operator/ (const ubigint& lhs, const ubigint& rhs) {
   ubigint result (lhs);
   return result /= rhs;
}

ubigint operator% (const ubigint& lhs, const ubigint& rhs) {
   ubigint result (lhs);
   return result %= rhs;
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.5 2019-12-12 20:20:36-08 - - $
d54 7
d68 1
a68 1
   ubigint& remainder = *this;
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.4 2019-12-12 19:56:31-08 - - $
d53 1
a53 1
void ubigint::divrem (ubigint divisor, divrem_type operation) {
d56 2
a57 6
      const char* error = nullptr;;
      switch (operation) {
         case QUOTIENT: error = "divide by zero"; break;
         case REMAINDER: error = "remainder by zero"; break;
      }
      throw ydc_error (error);
d74 1
a74 1
   if (operation == QUOTIENT) *this = quotient;
d78 1
a78 1
   divrem (that, QUOTIENT);
d83 1
a83 1
   divrem (that, REMAINDER);
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.3 2019-12-12 19:24:16-08 - - $
d53 1
a53 4
void udivide (const ubigint& dividend, const ubigint& divisor_,
              ubigint& quotient, ubigint& remainder,
              const char* error) {
   ubigint divisor {divisor_};
d55 8
a62 1
   if (divisor == ZERO) throw ydc_error (error);
d64 2
a65 2
   quotient = 0;
   remainder = dividend;
d78 1
d82 2
a83 3
   ubigint quotient, remainder;
   udivide (*this, that, quotient, remainder, "divide by zero");
   return *this = quotient;
d87 2
a88 3
   ubigint quotient, remainder;
   udivide (*this, that, quotient, remainder, "remainder by zero");
   return *this = remainder;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.2 2019-12-12 19:22:40-08 - - $
d55 1
a55 1
              const char* operation) {
d58 1
a58 1
   if (divisor == ZERO) throw ydc_error (operation + " by zero"s);
d78 1
a78 1
   udivide (*this, that, quotient, remainder, "divide");
d84 1
a84 1
   udivide (*this, that, quotient, remainder, "remainder");
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.1 2019-12-12 18:19:23-08 - - $
d54 2
a55 1
              ubigint& quotient, ubigint& remainder) {
d58 1
a58 1
   if (divisor == ZERO) throw ydc_error ("divide by zero");
d78 1
a78 1
   udivide (*this, that, quotient, remainder);
d84 1
a84 1
   udivide (*this, that, quotient, remainder);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.18 2019-12-12 18:17:49-08 - - $
d10 1
d12 1
a12 1
#include "debug.h"
d56 2
a57 2
   ubigint zero {0};
   if (divisor == zero) throw domain_error ("udivide by zero");
d65 1
a65 1
   while (power_of_2 > zero) {
@
